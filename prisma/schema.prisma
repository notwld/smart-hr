// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../lib/generated/prisma"
  previewFeatures = ["orderByRelation"]
  binaryTargets = ["native", "rhel-openssl-3.0.x", "windows"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id @default(cuid())
  username      String    @unique
  firstName     String
  lastName      String
  email         String    @unique
  cnic          String    @unique
  pfp           String?   // profile picture
  password      String
  salary        Float
  address       String
  department    String
  position      String
  joinDate      DateTime
  phone         String?
  role          Role      @default(EMPLOYEE)
  reportsTo     User?     @relation("ReportsTo", fields: [reportsToId], references: [id])
  reportsToId   String?
  subordinates  User[]    @relation("ReportsTo")
  attendance    Attendance[]
  leaves        Leave[]
  tasks         Task[]
  skills        Skill[]
  performance   Performance[]
  projects      ProjectAssignment[]
  notifications Notification[]
  meetings      Meeting[]
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
}

model Attendance {
  id        String   @id @default(cuid())
  userId    String
  user      User     @relation(fields: [userId], references: [id])
  date      DateTime
  checkIn   DateTime
  checkOut  DateTime?
  status    AttendanceStatus
  totalHoursToday String? // example: "5:48:32"
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Leave {
  id          String     @id @default(cuid())
  userId      String
  user        User       @relation(fields: [userId], references: [id])
  startDate   DateTime
  endDate     DateTime
  type        LeaveType
  status      LeaveStatus @default(PENDING)
  reason      String
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
}

model Task {
  id          String     @id @default(cuid())
  title       String
  description String?
  status      TaskStatus @default(PENDING)
  priority    Priority   @default(MEDIUM)
  dueDate     DateTime?
  assignedTo  String
  user        User       @relation(fields: [assignedTo], references: [id])
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
}

model Skill {
  id        String   @id @default(cuid())
  name      String
  level     Int      @default(0) // Progress bar (0â€“100)
  userId    String
  user      User     @relation(fields: [userId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Performance {
  id        String   @id @default(cuid())
  userId    String
  user      User     @relation(fields: [userId], references: [id])
  score     Int
  month     Int
  year      Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Project {
  id          String   @id @default(cuid())
  name        String
  description String?
  managerName String
  joinDate    DateTime
  tasksDone   Int
  totalTasks  Int
  timeSpentHours Int
  totalHours  Int
  progress    Int // in percentage
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  assignments ProjectAssignment[]
}

model ProjectAssignment {
  id         String   @id @default(cuid())
  projectId  String
  userId     String
  project    Project  @relation(fields: [projectId], references: [id])
  user       User     @relation(fields: [userId], references: [id])
  assignedAt DateTime @default(now())
}

model Notification {
  id          String   @id @default(cuid())
  userId      String
  user        User     @relation(fields: [userId], references: [id])
  message     String
  timestamp   DateTime
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Meeting {
  id          String   @id @default(cuid())
  userId      String
  user        User     @relation(fields: [userId], references: [id])
  title       String
  scheduledAt DateTime
  color       String   // e.g., "blue", "green", "purple"
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

enum Role {
  ADMIN
  MANAGER
  EMPLOYEE
}

enum AttendanceStatus {
  PRESENT
  ABSENT
  LATE
  HALF_DAY
  WORK_FROM_HOME
}

enum LeaveType {
  SICK
  VACATION
  PERSONAL
  MATERNITY
  PATERNITY
  UNPAID
}

enum LeaveStatus {
  PENDING
  APPROVED
  REJECTED
}

enum TaskStatus {
  PENDING
  IN_PROGRESS
  COMPLETED
  CANCELLED
}

enum Priority {
  LOW
  MEDIUM
  HIGH
  URGENT
}