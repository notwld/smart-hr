// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider        = "prisma-client-js"
  output          = "../lib/generated/prisma"
  previewFeatures = ["orderByRelation"]
  binaryTargets   = ["native", "rhel-openssl-3.0.x", "windows"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  ADMIN
  MANAGER
  EMPLOYEE
}

enum Gender {
  MALE
  FEMALE
  OTHER
}

enum MaritalStatus {
  SINGLE
  MARRIED
  DIVORCED
  WIDOWED
}

enum DocumentType {
  CNIC
  PASSPORT
  DEGREE
  CERTIFICATE
  CONTRACT
  OTHER
}

model User {
  id               String              @id @default(cuid())
  username         String              @unique
  firstName        String
  lastName         String
  email            String              @unique
  cnic             String              @unique
  pfp              String?             // profile picture
  password         String
  salary           Float
  address          String
  department       String
  position         String
  joinDate         DateTime
  phone            String?
  role             Role                @default(EMPLOYEE)
  status           String              @default("ACTIVE")
  dateOfBirth      DateTime?           // Made optional
  gender           Gender?             // Made optional
  maritalStatus    MaritalStatus?      // Made optional
  reportsTo        User?               @relation("ReportsTo", fields: [reportsToId], references: [id])
  reportsToId      String?
  subordinates     User[]              @relation("ReportsTo")
  emergencyContact EmergencyContact?
  education        Education[]
  experience       Experience[]
  documents        Document[]
  bankDetails      BankDetails?
  attendance       Attendance[]
  leaves           Leave[]             @relation("UserLeaves")
  tasks            Task[]
  skills           Skill[]
  performance      Performance[]
  projects         ProjectAssignment[]
  notifications    Notification[]
  meetings         Meeting[]
  image            String?
  managerApprovals Leave[]             @relation("ManagerApproval")
  adminApprovals   Leave[]             @relation("AdminApproval")
  createdAt        DateTime            @default(now())
  updatedAt        DateTime            @updatedAt
}

model EmergencyContact {
  id           String   @id @default(cuid())
  userId       String   @unique
  user         User     @relation(fields: [userId], references: [id])
  name         String
  relationship String
  phone        String
  address      String
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
}

model Education {
  id          String    @id @default(cuid())
  userId      String
  user        User      @relation(fields: [userId], references: [id])
  degree      String
  institution String
  field       String
  startDate   DateTime
  endDate     DateTime?
  grade       String?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

model Experience {
  id          String    @id @default(cuid())
  userId      String
  user        User      @relation(fields: [userId], references: [id])
  company     String
  position    String
  startDate   DateTime
  endDate     DateTime?
  description String?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

model Document {
  id         String       @id @default(cuid())
  userId     String
  user       User         @relation(fields: [userId], references: [id])
  type       DocumentType
  name       String
  url        String
  uploadedAt DateTime     @default(now())
  createdAt  DateTime     @default(now())
  updatedAt  DateTime     @updatedAt
}

model BankDetails {
  id            String   @id @default(cuid())
  userId        String   @unique
  user          User     @relation(fields: [userId], references: [id])
  bankName      String
  accountNumber String
  accountTitle  String
  branchCode    String?
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
}

model Attendance {
  id           String    @id @default(cuid())
  userId       String
  user         User      @relation(fields: [userId], references: [id])
  checkInTime  DateTime?
  checkOutTime DateTime?
  totalHours   Float?
  date         DateTime  @default(now())
  status       String    @default("PRESENT")
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt

  @@unique([userId, date])
}

model Leave {
  id            String      @id @default(cuid())
  userId        String
  user          User        @relation("UserLeaves", fields: [userId], references: [id])
  startDate     DateTime
  endDate       DateTime
  type          LeaveType
  status        LeaveStatus @default(PENDING)
  reason        String
  managerId     String?     // ID of the manager who needs to approve
  manager       User?       @relation("ManagerApproval", fields: [managerId], references: [id])
  adminId       String?     // ID of the admin who needs to approve
  admin         User?       @relation("AdminApproval", fields: [adminId], references: [id])
  managerStatus LeaveStatus @default(PENDING)
  adminStatus   LeaveStatus @default(PENDING)
  managerComment String?
  adminComment   String?
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
}

model Task {
  id          String     @id @default(cuid())
  title       String
  description String?
  status      TaskStatus @default(PENDING)
  priority    Priority   @default(MEDIUM)
  dueDate     DateTime?
  assignedTo  String
  user        User       @relation(fields: [assignedTo], references: [id])
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
}

model Skill {
  id        String   @id @default(cuid())
  name      String
  level     Int      @default(0) // Progress bar (0â€“100)
  userId    String
  user      User     @relation(fields: [userId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Performance {
  id        String   @id @default(cuid())
  userId    String
  user      User     @relation(fields: [userId], references: [id])
  score     Int
  month     Int
  year      Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Project {
  id             String              @id @default(cuid())
  name           String
  description    String?
  managerName    String
  joinDate       DateTime
  tasksDone      Int
  totalTasks     Int
  timeSpentHours Int
  totalHours     Int
  progress       Int // in percentage
  createdAt      DateTime            @default(now())
  updatedAt      DateTime            @updatedAt
  assignments    ProjectAssignment[]
}

model ProjectAssignment {
  id         String   @id @default(cuid())
  projectId  String
  userId     String
  project    Project  @relation(fields: [projectId], references: [id])
  user       User     @relation(fields: [userId], references: [id])
  assignedAt DateTime @default(now())
}

model Notification {
  id        String   @id @default(cuid())
  userId    String
  user      User     @relation(fields: [userId], references: [id])
  message   String
  timestamp DateTime
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Meeting {
  id          String   @id @default(cuid())
  userId      String
  user        User     @relation(fields: [userId], references: [id])
  title       String
  scheduledAt DateTime
  color       String // e.g., "blue", "green", "purple"
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

enum LeaveType {
  SICK
  VACATION
  PERSONAL
  MATERNITY
  PATERNITY
  UNPAID
}

enum LeaveStatus {
  PENDING
  APPROVED
  REJECTED
}

enum TaskStatus {
  PENDING
  IN_PROGRESS
  COMPLETED
  CANCELLED
}

enum Priority {
  LOW
  MEDIUM
  HIGH
  URGENT
}
